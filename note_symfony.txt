Notes symfony

- Symfony open:local /* Ouvre le serveur local sur le nav */
- Dans entity @ORM\Table(name="pins") renomme le nom de la table
- symfony console debug:router => liste les #tes routes
- symfony console doctrine:migrations:migrate prev => annule la derniere migration

- Le dossier Traits permet de regrouper du code reutilisable dans d'autre fichier php en utilisant => use nom_du_fichier 

NB: Les bundles permettent d'avoir des fonctionnalités supplementaires

formulaire
    -> On peut modifier la methode de requête et l'action de soumission
    $form = $this->createFormBuilder($entite, [
        'method' => ...
        'action' => ...
    ])
    OU 
    $form = $this->createFormBuilder($entite)
            ->setMethod('...') // GET, PUT, POST ...
            ->setAction('...') // Lien ou envoyer les donnéés
    
    NB: setMethod et setAction ne sont disponible que sur createFormBuilder

Les routes: 
    L'ordre des routes est important à respecter. Pour donner     l'importance d'une route par rapport aux autres il faut lui donner une priorité =>
     /**
     * @Route("/pins/{id<[0-9]+>}", name="app_pins_delete", methods={"DELETE"}, priority="1")
     */

Ajouter une date à chaque ligne existante de la table
    -> Dans l'entité ajouter => @ORM\HasLifecycleCallbacks ce qui permttra d'ajouter des valeurs aux colonnes existantes avant le persist 
    (Ajouter les evenements du cycle de vie)
    -> Créer une methode qui s'effectuera avant ou après le persist d'une nouvelle ligne (un objet)
        * @ORM\PrePersist => avant la creation d'une ligne
        * @ORM\PreUpdate => avant la modification d'une ligne
    -> Pour éviter la valeur null dans les lignes on ajoute à chaque colonne
        options={"default": "CURRENT_TIMESTAMP"}
        * CURRENT_TIMESTAMP donne la date et l'heure actuelle

Modifier le fuseau horaire
    -> Créer un fichier php.ini
    -> Lister tous les fuseaux horaires dont on a besoin

Invite de commande
    -> Se connecter à la base de donnée: mysql -u root -p
    -> Avoir les données une bdd: use nom_bdd;
    -> Voir les tables de bdd: show tables
    -> Afficher la description d'une table: describe nom_table

Time twig
    -> composer require knplabs/knp-time-bundle => nous donne le temps en durée (6 month ago)

Dimension image
    -> composer require liip/imagine-bundle => permet de créer des thumbnails (images miniatures)
    -> Configuration => https://symfony.com/bundles/LiipImagineBundle/current/filters/sizing.html
    -> Afficher image dans twig => https://github.com/dustin10/VichUploaderBundle/blob/master/docs/generating_urls.md
    -> Ajouter les dimensions de l'image dans twig => https://github.com/liip/LiipImagineBundle


Copier le dossier images de assets dans public
    -> Dans webpack.config.js ajouter
        .copyFiles({
            from: './assets/images',
            to: '[path][name].[hash:8].[ext]',
            context: './assets'
        })

Creation de l'entité User
    -> symfony console make:User
    -> User implements UserInterface => signifie que User doit respecter le contrat de UserInterface (User utilisera les methodes abstraites de UserInterface)
    -> Les methodes abstraites => méthodes sans corps 
        exp: public function getRoles();

Mise à jour des bundle
    -> composer recipes => voir tous les bundle qui ont été mis à jour
    -> si le bundle mailer à une nouvelle MAJ => composer recipes symfony/mailer pour voir les mis à jour et mettre à jour le bundle 

Hachage mdp
    -> Algorithme de hachage:
        - mb5() sur 32 caract 
        - sha256 sur 64 caract
        - sha512 sur 128 caract
    -> Si on hache le même msg on aura tjrs le même resultat
        - Pour résoudre le problème on ajoute un sel chryptographique
            exp: haché 'secret' avec mb5() => mb5('tata' . 'secret' . 'tata')
                ici 'tata' est le sel chryptographique ce qui rendra la tâche plus difficile aux hackeurs de trouver le mdp ('secret')